<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_elizabeth_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>s_mask2</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize the Elizabeth object
spd=4;
image_speed=0;
facing = RIGHT;
state = elizabeth_move_state;
last_room = room;
notmoving = 1;

//CREATE the sprite array
sprite[RIGHT] = s_elizabeth_right;
sprite[UP] = s_elizabeth_up;
sprite[LEFT] = s_elizabeth_left;
sprite[DOWN] = s_elizabeth_down;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control the state
script_execute(state);

// Set y value
depth = -y;

//Update the sprite
if !notmoving sprite_index = sprite[facing];
else {
    //Allows player to change facing dir even when not moving
    if o_input.right {
        facing = RIGHT;
    } else if o_input.left {
        facing = LEFT;
    }else if o_input.down {
        facing = DOWN;
    }else if o_input.up {
        facing = UP;
    }
    sprite_index = sprite[facing];  
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to the next room
if (state != elizabeth_wait_state) {
    state = elizabeth_wait_state;
    var transition = instance_create(0, 0, o_fade_transition);
    transition.next_room = other.next_room;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move to start position
if (instance_exists(o_start_position)) {
    with (o_start_position) {
        if (last_room == other.last_room) {
            other.x = x;
            other.y = y;
        }
    }
}

// Update the last room
last_room = room;

// Set the player's state
if (state == elizabeth_wait_state) {
    state = elizabeth_move_state;
    room_persistent = false;
    persistent = true;
}


// Create the view
if (!instance_exists(o_view)) {
    instance_create(x, y, o_view);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init wall
/*
var xfront;
var yfront;
var xoffset = 32
var yoffset = 32

switch (facing) {
    case UP:
        xfront = x
        yfront = y - yoffset
        break;
    case RIGHT:
        xfront = x + xoffset
        yfront = y
        //instance_create(x+32, y,o_wall)
        break;
    case DOWN:
        xfront = x
        yfront = y + yoffset
        //instance_create(x, y+32,o_wall)
        break;
    case LEFT:
        xfront = x - xoffset
        yfront = y
        //instance_create(x-32, y,o_wall)
        break;
}
var inst;
inst = instance_position(xfront, yfront, o_empty);
if inst != noone
   {
   with (inst) {
        instance_create(x,y,o_wall);
   }
   }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
