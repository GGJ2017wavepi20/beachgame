<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HOI!!! THIS IS TEMMIE
dist = 64
selected = 'tower';
cursor = c_red;
sandresource = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Everything works!
x = mouse_x;
y = mouse_y;

if mouse_wheel_up() {
    selected = 'tower'
}
if mouse_wheel_down() {
    selected = 'wall'
}


//Get the tile
var inst;
inst = instance_position(x, y, o_empty);

//Digging
if (distance_to_object(o_elizabeth)&lt; dist) {
    if o_input.dig {
        if inst != noone and inst.sand!=0 and inst.wetness = 0 { 
            with (inst) {
                if !place_meeting(x,y,o_elizabeth) and !position_meeting(x,y, o_solid) {
                    dug = 1
                    o_cursor.sandresource ++;
                    sand = 0;
                }
            }
        }
    }
}


//Build towers and walls
if selected == 'tower' {
    if (distance_to_object(o_elizabeth)&lt; dist) {
        if o_input.build {
            if sandresource &gt;= o_tower.cost {
                if inst != noone /*and inst.sand != 0*/ and inst.wetness = 1{  
    
                    with (inst) {
                        if !place_meeting(x,y,o_elizabeth) and !position_meeting(x,y, o_solid) {
                            instance_create(x,y,o_tower)
                            o_cursor.sandresource -= o_tower.cost
                        }
                    }
                }
            }
        }
    }

} else if selected == 'wall' {
    if (distance_to_object(o_elizabeth)&lt; dist) {
        if o_input.build {
        
            if sandresource &gt;= o_wall.cost {
                if inst != noone /*and inst.sand!=0*/ and inst.wetness = 1{ 
    
                    with (inst) {
                        //Horizontal walls
                        if place_meeting(x-1,y, o_tower) or place_meeting(x+1,y, o_tower) {                
                            if !place_meeting(x,y,o_elizabeth) and !position_meeting(x,y, o_solid) {
                                instance_create(x,y,o_wall);
                                o_cursor.sandresource -= o_wall.cost
                            }
                        }else if place_meeting(x-1,y, o_wall) or place_meeting(x+1,y, o_wall) {                
                            if !place_meeting(x,y,o_elizabeth) and !position_meeting(x,y, o_solid) {
                                instance_create(x,y,o_wall);
                                o_cursor.sandresource -= o_wall.cost
                            }
                        }
                        //Vertical walls
                        if place_meeting(x,y+1, o_tower) or place_meeting(x,y-1, o_tower) {                
                            if !place_meeting(x,y,o_elizabeth) and !position_meeting(x,y, o_solid) {
                                instance_create(x,y,o_wall_v);
                                o_cursor.sandresource -= o_wall.cost
                            }
                        } else if place_meeting(x,y+1, o_wall_v) or place_meeting(x,y-1, o_wall_v) {                
                            if !place_meeting(x,y,o_elizabeth) and !position_meeting(x,y, o_solid) {
                                instance_create(x,y,o_wall_v);
                                o_cursor.sandresource -= o_wall.cost
                            }
                        }
                    }
                }
            }
            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DRAW the cursor
var inst;
inst = instance_position(x, y, o_empty);

if (distance_to_object(o_elizabeth)&lt; dist) {
    if inst != noone { 
            with (inst) draw_sprite(s_cursor,0,x,y)
    }

} 

//Turn cursor green
if selected == 'tower' {
    if (distance_to_object(o_elizabeth)&lt; dist) {
        if sandresource &gt;= o_tower.cost {
            if inst != noone and inst.sand != 0 and inst.wetness = 1{  

                with (inst) {
                    if !place_meeting(x,y,o_elizabeth) and !position_meeting(x,y, o_solid) {
                        draw_sprite(s_cursor_green,0,x,y);
                    }
                }
            }
        }
    }
} else if selected == 'wall' {
    if (distance_to_object(o_elizabeth)&lt; dist) {
            if sandresource &gt;= o_wall.cost {
                if inst != noone and inst.sand!=0 and inst.wetness = 1{ 
                
                    with (inst) {
                        //Horizontal walls
                        if place_meeting(x-1,y, o_tower) or place_meeting(x+1,y, o_tower) {                
                            if !place_meeting(x,y,o_elizabeth) and !position_meeting(x,y, o_solid) {
                            draw_sprite(s_cursor_green,0,x,y);
                            }
                        }else if place_meeting(x-1,y, o_wall) or place_meeting(x+1,y, o_wall) {                
                            if !place_meeting(x,y,o_elizabeth) and !position_meeting(x,y, o_solid) {
                            draw_sprite(s_cursor_green,0,x,y);
                            }
                        }
                        //Vertical walls
                        if place_meeting(x,y+1, o_tower) or place_meeting(x,y-1, o_tower) {                
                            if !place_meeting(x,y,o_elizabeth) and !position_meeting(x,y, o_solid) {
                            draw_sprite(s_cursor_green,0,x,y);
                            }
                        } else if place_meeting(x,y+1, o_wall_v) or place_meeting(x,y-1, o_wall_v) {                
                            if !place_meeting(x,y,o_elizabeth) and !position_meeting(x,y, o_solid) {
                            draw_sprite(s_cursor_green,0,x,y);
                            }
                        }
                    }
                }
            }
            
        }
}
/*
if selected == 'tower' {
    draw_text_colour(8,8,selected,c_black,c_black,c_black,c_black,1)
}
else if selected == 'wall' {
    draw_text_colour(8,8,selected,c_black,c_black,c_black,c_black,1)
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selected = 'wall';
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selected = 'tower';
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
