<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wave</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//inizializza
movimentoWaterMax=8*32;
movimentoWater=0;
codOndaWater=0;
movimentoRitorno=false;
direzioneLR=false;
direzione=270;


movimentoWaterMin=-2*32;
wavenumber = 1
velox = 2 // aumenta con le fasi lunari
//attiva onda
avanzamento=1 
danno = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with (obj_wave) instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//bagna la sabbia
var offset = 1
var inst;
if (direction=270){
inst=instance_position(x,y-offset,o_empty);
if (inst!=noone){
    inst.wetness=1;
    inst.dug=0;
    if !movimentoRitorno {
        inst.water = 1;
    } /*else {
        inst=instance_position(x,y+offset,o_empty);
        if (inst!=noone){
            inst.water = 0;
        }
    }*/
}
}
if (direction=0){
inst=instance_position(x-offset,y-offset,o_empty);
if (inst!=noone){
    inst.wetness=1;
    inst.dug=0;
    if !movimentoRitorno {
        inst.water = 1;
    } /*else {
        inst=instance_position(x,y+offset,o_empty);
        if (inst!=noone){
            inst.water = 0;
        }
    }*/
}
}
if (direction=180){
inst=instance_position(x+offset,y-offset,o_empty);
if (inst!=noone){
    inst.wetness=1;
    inst.dug=0;
    if !movimentoRitorno {
        inst.water = 1;
    } /*else {
        inst=instance_position(x+offset,y+offset,o_empty);
        if (inst!=noone){
            inst.water = 0;
        }
        
    }*/
}
}
/*
inst = instance_position(x+32,y+33,o_empty)
if direction = 90 {
    if inst!=noone {
      //  inst=instance_position(x,y-offset,o_empty);
       // if (inst!=noone){
            inst.water = 0;
        //}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//controllo fine o_solid
//movimento
//max move 8
var offset= 1


speed = velox

if !movimentoRitorno{
    if (!position_meeting(self.x-offset,self.y+32,o_solid) &amp;&amp; !position_meeting(self.x+offset-1,self.y+32,o_solid)) {
        self.direction=270;
        direzioneLR=false;
        direzione=270;
    }
    movimentoWater++;

}else{
if (!position_meeting(self.x-offset,self.y-32,o_solid) &amp;&amp; !position_meeting(self.x+offset-1,self.y-32,o_solid)) {
        self.direction=90;
        direzione=90;
        direzioneLR=false;
        movimentoWater--;
    }
}


// torna indietro
if (movimentoWater==movimentoWaterMax) {
    self.direction=90;
    direzione=90;
    movimentoRitorno=true;
    direzioneLR=false;
    avanzamento = false
    sprite_index = spr_WaveBack;
}

// torna indietro
if (movimentoWater==movimentoWaterMin) {
/*
    self.direction=270;
    direzione=270;
    movimentoRitorno=false;
    direzioneLR=false;
    avanzamento = true
    */
    instance_destroy()
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//pathfinder
//0= right; 180=left 90=top 270=bottom

var xWater=self.x;
var yWater=self.y;
//show_message('collisione');
if !direzioneLR{
for(i=0; i&lt;=1000; i++){
/*
if place_free(xWater+1+32*i,yWater){
direzione=0;
break;
}
if place_free(xWater-1-32*i,yWater){
direzione=180;
break;
}
*/
if (direction==270){
        if (!position_meeting(xWater+32*i ,yWater+32,o_solid)) {
            direzione=0;
            direzioneLR=true;
            break;
        }
        if (!position_meeting(xWater-32*i,yWater+32,o_solid) ) {
            direzione=180;
            direzioneLR=true
            break;
        }
    }
if(direction==90){
            if (!position_meeting(xWater+32*i ,yWater-32,o_solid)) {
            direzione=0;
            direzioneLR=true;
            break;
        }
        if (!position_meeting(xWater-32*i,yWater-32,o_solid) ) {
            direzione=180;
            direzioneLR=true
            break;
        }
    }
       // if (direction==270){
       // show_message('collisione tower' + string(codOndaWater));}
}
direction=direzione;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_tower">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//pathfinder
//0= left; 1=right

var xWater=self.x;
var yWater=self.y;
//show_message('collisione');
if !direzioneLR{
for(i=0; i&lt;=1000; i++){


/*
if place_free(xWater+1+32*i,yWater){
direzione=0;
break;
}
if place_free(xWater-1-32*i,yWater){
direzione=180;
break;
}
*/
if (direction==270){
        if (!position_meeting(xWater+32*i ,yWater+32,o_solid)) {
            direzione=0;
            direzioneLR=true;
            instO = instance_position(xWater,yWater+32,o_solid)
            if instO != noone{ 
                if !danno {
                    danno = true
                       
                    instO.resistance =instO.resistance - 1
                }
            show_debug_message(instO.resistance)
            }
            break;
        }
        if (!position_meeting(xWater-32*i,yWater+32,o_solid) ) {
            direzione=180;
            direzioneLR=true
            break;
        }
}
if(direction==90){
            if (!position_meeting(xWater+32*i ,yWater-32,o_solid)) {
            direzione=0;
            direzioneLR=true;
            break;
            }
            if (!position_meeting(xWater-32*i,yWater-32,o_solid) ) {
            direzione=180;
            direzioneLR=true
            break;
            }
    }
       // if (direction==270){
       // show_message('collisione tower' + string(codOndaWater));}
}
direction=direzione;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
